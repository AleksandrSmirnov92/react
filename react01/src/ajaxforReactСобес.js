/* AJAX
ajax запросы для чего нужен - стандартная ситуация браузер и сервер браузер просит дай мне html сервер дает ему это и в браузере все отрисовалось 
допустим вы открыли сообщение и тут пришло оповещение что пришло новое сообщение как это сделать без перезагрузки так вот ajax для этого  и нужен
ajax - асинхронный javascript
как только браузер делает запрос в ответ сервер возвращает сообщение в формате json
у сервера есть контрольные точки индефикаторы к которым нужжно обращатся называются 
andpoint - у каждого endpoint есть характеристики например url запрос
допустим мы подключили библиотеку jquery
и у этой библиотеки есть мето ajax()
$.ajax() - сделай ajax запрос
чтобы сделать ajax запрос мы как минимум должны знать url сервера по которому делать запрос
API server - это какие endpoints есть у нашего сервера (тоесть url)
в консоле браузера есть подраздел Network он означет все что приходит к нам с сервера 

урок 2 success,callback
сегодня мы научимся обрабатывать при помощи javascript ответ в прошлом уроке мы содали ajax запрос
1 подключили библиотеку jquery 
2$.ajax(url)
3- провели через консоль в браузере что все подключилось в разделе network
И так чтобы обработать ajax запрос нам нужен callback
$.ajax(url, {вторым параметром создаем обьект и у кажим у него свойство 
   success:function () {
      console.log()
   }

}) тоесть мы вызвали метод ajax у которого есть callback  у которого есть свойство success 

урок 3 get query params ,get-параметры,query string
все ajax запросы являются http запросами 
http - протокол имеет типы различных запросов:
get - запрос когда мы хотим от сервера что то взять, например когды мы вбиваем в строку поиска url мы автоматически делаем get запрос
get запрос состоит только из одной характеристики это строка ввода (url) - больше значений нету 
get string - это get параметр если мы хотим передать на сервер какой то конкретный запрос (ключ - xзначение)
но длина строки не может быть очень большой 
какие параметры мы можем передать серверу решают серверные разработчики 
url/images? page = 1&count = 20 тоесть мы первы параметром получили первую страницу а вторым посчитали кол-во запросов и он 20 раз отобразит json строку
например мы хотим чтобы при нажатии на кнопку мы брали с сервера одну картинку итак 
1- создали кнопку 
2- создали функцию 
fuction makemakemake () {
   $.ajax(url.${pagenumber.value}, { - передаем в параметр значение value соторое нам пришло со странице
      success: function (data) {
         data.forEach (el => {
            const img = document.createElement('img') - cоздаем элемент
            img.srs = el.thumbnail; берем в network
            document.querySelector('#result').appendChild(img) - вставляем элемент перед предыдущем элементом
         })
      }
   })
}
click.addEventListener('click', makemakemake) - тперь при нажатии на кнопку произойдет запрос на сервер и возьмет картинку

урок 4 ui-dal(data access layer) рефакторинг нашего кода 
раздробили ui файл следит то что делаю в браузере потом передает data access layer следит какой запрос нужно сделать на сервер 
в общем просто разбили по фаулам сделали архитектуру приложения 

урок 4 promise, axios
тоесть есть функция допустим 
function make () {
   const promise = $.ajax(url,{
      success: function () {
         return - если мы здесь сделаем return то он вернет нашему ajax запросу мы так сделать не можем поэтому мы присваем наш ajax запрос переменной
      }
   })
   return promise теперь return отработает нормально
}
получается нам больше не нужно передавать success код сократился 
function make () {
   const promise = $.ajax(url)
   return promise
}
другой файл
clickMeButton ('click',() = {
   const promise = make()
   promise.then (callback) тоесть когда promise вызовится то сделаем callback функцию
})
тперь вместо jquery будем использовать библиотеку axios подключаем
теперь вместо 
$.ajax()
$axios.get
function () {
   const promise = axios.get(url)
 return promise.then((data) => {
    return data.data
 })
} 
promise - эта та штука у которой есть метод then сама функция возвращает promise

урок 6 todo-list api, get, post
на примере todo list 
function gettasks () {
   const promise = axios.get(url) вместо get мы используем post промис возвращает обьект у которого есть обязательные итрибуты такие как 
   type
   id - и когда мы в url передали то значение которое нам нужно на сервере создался обьект с именем котрое мы передали и присвоили уникальный  id 
   name
   return promise.then ((response) => {
      return response.data
   })
}
Урок 7 request payload,POST отправка данных на сервер 
в чем отличие get от  post 
get параметр добавляет в строку запроса адресс по которому делаем запрос (не рассчитан на то что при помощи строки запроса передавать много параметров)
по сути get запрос это всего лишь строка 
post- а вот post запрос рассчитан на то чтобы на сервер отдават много данных.Post запрос характеризуется не только строкой запроса , но и еще
есть специальное тело запроса и так axios после url запроса принимает еще json обьект
const promise = axios.post(url, {
   widgetId:543245,
   title: title
})
подитожем в пост  мы можем передать очень много параметров и отображатся будет в консоле разработчика request payload

урок 8 идемпотентность, rest api , put, delete
идемпотентность значит что мы можем отправлять один и тот же  запрос 100 тысяч раз и мы 100 тысяч раз получим один и тот же ответ 
суть запроса что наш запрос не меняет состояние сервера в отличии от post запроса
в rest api - это общая спецификация каким должны быть запросы на сервер в ней говорится что все url должны быть одинаковы
отличие только в типе запроса
axios.put(url,{})
axios.delete(url) - и прописывает в url наш id (Смотреть документацию)

урок 9 cors, options, content-type , accept-type
put как и post требует обновит файл на сервере в нашем случае изменить например имя файла











































































































































*/